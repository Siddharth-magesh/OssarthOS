import requests
import argparse
import subprocess
import os
import signal
import time

SERVER_URL = "http://localhost:3333/ask"
CONDA_ENV = "d:/smart"
FLASK_APP_PATH = "D:/OssarthOS/app.py"
PID_FILE = "D:/OssarthOS/osrt.pid"

def start_server():
    if os.path.exists(PID_FILE):
        print("Server is already running!")
        return

    CONDA_PATH = r"C:\Users\Siddharth\anaconda3\condabin\conda.bat"
    process = subprocess.Popen(
        f'cmd.exe /c "{CONDA_PATH} activate {CONDA_ENV} && python {FLASK_APP_PATH}"',
        shell=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL
    )

    time.sleep(5)

    with open(PID_FILE, "w") as f:
        f.write(str(process.pid))

    print(f"Server started with PID {process.pid}")

def stop_server():
    if not os.path.exists(PID_FILE):
        print("No running server found!")
        return

    with open(PID_FILE, "r") as f:
        pid = int(f.read().strip())

    try:
        os.kill(pid, signal.SIGTERM)
        os.remove(PID_FILE)
        print("Server stopped successfully.")
    except ProcessLookupError:
        os.remove(PID_FILE)
        print("Process not found. Removed stale PID file.")

def ask_question(prompt):
    try:
        response = requests.post(SERVER_URL, data={"prompt": prompt})
        if response.status_code == 200:
            print(response.text.strip())
        else:
            print("Error:", response.text)
    except requests.exceptions.ConnectionError:
        print("Server is not running. Start the server manually.")

def main():
    parser = argparse.ArgumentParser(description="OSRT CLI Tool")
    parser.add_argument("command", choices=["ask", "start", "stop"], help="Feature to use")
    parser.add_argument("question", nargs="?", default=None, help="Question to ask the LLM (only for 'ask' command)")

    args = parser.parse_args()

    if args.command == "ask":
        if not args.question:
            print("Error: Please provide a question for 'ask' command.")
        else:
            ask_question(args.question)
    elif args.command == "start":
        print("Start manually as of now, working on this feature rn")
        #start_server()
    elif args.command == "stop":
        print("Stop manually as of now, working on this feature rn")
        #stop_server()

if __name__ == "__main__":
    main()
